<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.keycrafter.mapper.ProductReplyMapper">
	<insert id="insertReply">
		<selectKey keyProperty="rnum" order="BEFORE" resultType="int">
			SELECT IFNULL(MAX(rnum), 0) + 1 FROM product_reply
		</selectKey>
		INSERT INTO product_reply
		<choose>
			<when test="id == null and name == null and password == null">
				(rnum, pid, lft, rgt)
			VALUES
				(#{rnum}, #{pid}, #{lft}, #{rgt})
			</when>
			<when test="id == null">
				(rnum, pid, name, password, content, lft, rgt)
			VALUES
				(#{rnum}, #{pid}, #{name}, #{password}, #{content}, #{lft}, #{rgt})
			</when>
			<when test="name == null and password == null">
				(rnum, pid, id, content, lft, rgt)
			VALUES
				(#{rnum}, #{pid}, #{id}, #{content}, #{lft}, #{rgt})
			</when>
		</choose>
		
		<!-- ORACLE VER.
		<selectKey keyProperty="rnum" order="BEFORE" resultType="int">
			SELECT seq_product_reply.nextval FROM DUAL
		</selectKey>
		INSERT INTO product_reply
		<choose>
			<when test="id == null and name == null and password == null">
				(rnum, pid, lft, rgt)
			VALUES
				(#{rnum}, #{pid}, #{lft}, #{rgt})
			</when>
			<when test="id == null">
				(rnum, pid, name, password, content, lft, rgt)
			VALUES
				(#{rnum}, #{pid}, #{name}, #{password}, #{content}, #{lft}, #{rgt})
			</when>
			<when test="name == null and password == null">
				(rnum, pid, id, content, lft, rgt)
			VALUES
				(#{rnum}, #{pid}, #{id}, #{content}, #{lft}, #{rgt})
			</when>
		</choose>
		-->
	</insert>
	
	<select id="selectReply" resultType="kr.co.keycrafter.domain.ProductReplyVO">
		SELECT r.rnum, r.id, m.name username, r.name, r.password, r.content
		FROM product_reply r
		LEFT OUTER JOIN member m
		ON r.id = m.id
		WHERE r.rnum = #{rnum}
	</select>
	
	<select id="selectChildren" resultType="kr.co.keycrafter.domain.ProductReplyVO">
		SELECT node.rnum, node.lft, node.rgt, (COUNT(sub_parent.rnum) - 1) AS depth
		FROM product_reply parent, product_reply sub_parent, product_reply node
		WHERE parent.pid = #{pid} AND sub_parent.pid = #{pid} AND node.pid = #{pid}
			AND parent.rnum = #{rnum}
			AND sub_parent.lft BETWEEN parent.lft AND parent.rgt
			AND node.lft BETWEEN parent.lft AND parent.rgt
			AND node.lft BETWEEN sub_parent.lft AND sub_parent.rgt
		GROUP BY node.rnum, node.lft, node.rgt
	<![CDATA[
		HAVING (COUNT(sub_parent.rnum) - 1) <= 1
	]]>
		ORDER BY node.lft
	</select>
	
	<update id="updateLeft">
		UPDATE product_reply
		SET lft = lft + #{amount}
		WHERE lft > #{leftOrRight}
			AND pid = #{pid}
	</update>
	
	<update id="updateRight">
		UPDATE product_reply
		SET rgt = rgt + #{amount}
		WHERE rgt > #{leftOrRight}
			AND pid = #{pid}
	</update>
	
	<update id="deleteReply">
		UPDATE product_reply
		SET content = #{content}, updatedate = CURRENT_TIMESTAMP, deleted = #{deleted}
		WHERE rnum = #{rnum} AND deleted = 'N'
	<!-- ORACLE VER.
		UPDATE product_reply
		SET content = #{content}, updatedate = SYSDATE, deleted = #{deleted}
		WHERE rnum = #{rnum} AND deleted = 'N'
	-->
	</update>
	
	<delete id="deleteAllReply">
		DELETE FROM product_reply
		WHERE pid = #{pid}
	</delete>
	
	<select id="selectCount" resultType="int">
		SELECT COUNT(rnum)
		FROM product_reply
		WHERE pid = #{pid}
	</select>
	
	<select id="selectList" resultType="kr.co.keycrafter.domain.ProductReplyVO">
		SELECT node.rnum, node.pid, node.id, m.name username, node.name, node.password, node.content,
			node.replydate, node.updatedate, node.lft, node.rgt, node.deleted, (COUNT(parent.rnum) - 1) depth
		FROM product_reply parent, product_reply node
		LEFT OUTER JOIN member m
		ON node.id = m.id
		WHERE node.pid = #{pid} AND parent.pid = #{pid}
			AND node.lft BETWEEN parent.lft AND parent.rgt
		GROUP BY node.rnum, node.pid, node.id, m.name, node.name, node.password, node.content,
			node.replydate, node.updatedate, node.lft, node.rgt, node.deleted
		ORDER BY node.lft
	</select>
</mapper>