<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.keycrafter.mapper.MemberMapper">
	<resultMap type="kr.co.keycrafter.domain.MemberVO" id="memberMap">
		<result property="id" column="id"/>
		<result property="password" column="password"/>
		<result property="name" column="name"/>
		<result property="email" column="email"/>
		<result property="contact" column="contact"/>
		<result property="address" column="address"/>
		<result property="zipCode" column="zipcode"/>
		<result property="regDate" column="regdate"/>
		<result property="enabled" column="enabled"/>
		<collection property="authList" resultMap="authMap"/>
	</resultMap>
	
	<resultMap type="kr.co.keycrafter.domain.AuthVO" id="authMap">
		<result property="id" column="id"/>
		<result property="auth" column="auth"/>
	</resultMap>
	
	<insert id="insertMember">
		INSERT INTO member
		(id, password, name, email, contact, address, zipcode)
		VALUES
		(#{id}, #{password}, #{name}, #{email}, #{contact}, #{address}, #{zipCode})
	</insert>
	
	<insert id="insertAuth">
		INSERT INTO member_auth
		(id, auth)
		VALUES
		(#{id}, #{auth})
	</insert>
	
	<select id="getId" resultType="string">
		SELECT id
		FROM member
		WHERE id = #{id}
	</select>
	
	<select id="getEmail" resultType="string">
		SELECT email
		FROM member
		WHERE email = #{email}
	</select>
	
	<select id="getMember" resultType="kr.co.keycrafter.domain.MemberVO">
		SELECT id, password, name, email, contact, address, zipcode, regDate
		FROM member
		WHERE id = #{id}
	</select>
	
	<select id="getMemberWithAuth" resultMap="memberMap">
		SELECT m.id, password, name, email, contact, address, zipcode, regdate, enabled, a.auth
		FROM member m
		LEFT OUTER JOIN member_auth a
		ON m.id = a.id
		WHERE m.id = #{id}
	</select>
	
	<update id="updateMemberPw">
		UPDATE member
		SET password = #{password}, name = #{name}, email = #{email}, contact = #{contact}, address = #{address}, zipcode = #{zipCode}
		WHERE id = #{id}
	</update>
	
	<update id="updateMemberNoPw">
		UPDATE member
		SET name = #{name}, email = #{email}, contact = #{contact}, address = #{address}, zipcode = #{zipCode}
		WHERE id = #{id}
	</update>
	
	<update id="updateAuth">
		UPDATE member_auth
		SET auth = #{auth}
		WHERE id = #{id}
	</update>
	
	<delete id="deleteMember">
		DELETE FROM member
		WHERE id = #{id}
	</delete>
	
	<delete id="deleteAuth">
		DELETE FROM member_auth
		WHERE id = #{id}
	</delete>
	
	<select id="getMemberList" resultMap="memberMap">
		SELECT m.id, m.name, m.email, m.contact, a.auth
		FROM (
			SELECT rownum rn, id, name, email, contact
			FROM (
				SELECT * FROM member ORDER BY id ASC
			)
			WHERE
	<foreach item="keywordValue" index="i" collection="keyword">
		<trim prefix="(" suffix=") AND " prefixOverrides="OR">
			<if test='type[i].contains("I")'>
				OR id like '%'||#{keywordValue}||'%'
			</if>
			<if test='type[i].contains("N")'>
				OR name like '%'||#{keywordValue}||'%'
			</if>
			<if test='type[i].contains("T")'>
				OR contact like '%'||#{keywordValue}||'%'
			</if>
			<if test='type[i].contains("E")'>
				OR email like '%'||#{keywordValue}||'%'
			</if>
		</trim>
	</foreach>
			<![CDATA[
				rownum <= #{page} * #{show}
			]]>
		) m
		LEFT OUTER JOIN member_auth a
		ON m.id = a.id
		WHERE rn > (#{page} - 1) * #{show}
		ORDER BY m.id ASC
	</select>
	
	<select id="getMemberCount" resultType="int">
		SELECT COUNT(DISTINCT id)
		FROM member
		WHERE
<foreach item="keywordValue" index="i" collection="keyword">
	<trim prefix="(" suffix=") AND " prefixOverrides="OR">
		<if test='type[i].contains("I")'>
			OR id like '%'||#{keywordValue}||'%'
		</if>
		<if test='type[i].contains("N")'>
			OR name like '%'||#{keywordValue}||'%'
		</if>
		<if test='type[i].contains("T")'>
			OR contact like '%'||#{keywordValue}||'%'
		</if>
		<if test='type[i].contains("E")'>
			OR email like '%'||#{keywordValue}||'%'
		</if>
	</trim>
</foreach>
			id != '_'
	</select>
</mapper>